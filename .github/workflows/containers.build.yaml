name: "Containers: Test-and-Build"

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - 'dev/**'
    - ".github/workflows/containers.build.yaml"

env:
  # How long to sleep before running the tests (gives the application time to start)
  GOSS_SLEEP: 30

# Detect which folders in project-root (which contain the containers) contain changes
jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-20.04
    outputs:
      matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: json
        filters: |
          changed:
          - 'dev/**'
    - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
    - id: reduce
      run: |
        CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
        echo ::set-output name=containers::${CONTAINERS}

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs:
    - changes
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false
    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
    - name: Checkout
      uses: actions/checkout@2.4.2

    # Define if tests and push should be run against which versions/platforms
    - name: Prepare
      id: prep
      run: |
        CATEGORY="dev"
        VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
        echo ::set-output name=category::${CATEGORY}
        echo ::set-output name=version::${VERSION}
        PLATFORM="linux/amd64"
        echo ::set-output name=platform::${PLATFORM}

    - name: Get Time
      id: time
      uses: nanzm/get-time-action@v1.1
      with:
        timeZone: 1
        format: 'YYYYMMDDHHmmss'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2.0.0
      with:
        platforms: amd64

    - name: Login to GHCR
      uses: docker/login-action@v2.0.0
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4.0.1
      with:
        # list of Docker images to use as base name for tags
        images: |
          ghcr.io/arldka/${{ matrix.container }}

    # Install and configure Buildx
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2.0.0
      with:
        install: true
        version: latest
        driver-opts: image=moby/buildkit:latest

    # Push if not a PR, otherwise just test the build process for all requested platforms
    - name: Build and Push
      id: push
      uses: docker/build-push-action@v3.1.1
      with:
        build-args: |
          VERSION=${{ steps.prep.outputs.version }}
          CONTAINER_NAME=${{ matrix.container }}
          CONTAINER_VER=${{ steps.prep.outputs.version }}
        context: .
        platforms: ${{ steps.prep.outputs.platform }}
        file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
        push: ${{ steps.prep.outputs.push }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ steps.prep.outputs.cache_from }}
        cache-to: ${{ steps.prep.outputs.cache_to }}
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:latest
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:${{ steps.prep.outputs.version }}
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:build${{ steps.time.outputs.time }}

  container-build-complete:
    needs: [build]
    name: Container Build Completed
    runs-on: ubuntu-latest
    steps:
      - name: complete message
        run: echo "Container Build and Tests Completed Successfully"